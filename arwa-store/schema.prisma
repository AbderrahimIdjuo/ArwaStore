// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model clients {
  id            String       @default(cuid()) @id
  createdAt     DateTime?     @default(now())
  updatedAt     DateTime?     @updatedAt
  name          String?
  tele          String?      @unique
  ville         String?
  adress        String?
  sold          Int?
  commandes     commandes[]  
}

enum Status {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}

model commandes {
  id            String       @default(cuid()) @id
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  nbrArticls    String?
  description   String?
  prixInt       String?
  avance        String?
  livraison     String?
  rest          String?
  clientID      String    
  client        clients  @relation(fields: [clientID], references: [id] , onDelete: Cascade)
  status        Status   @default(PENDING)
  trakingNbr    String? 

}

model factures {
  id                  String       @default(cuid()) @id
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  barid               Int?          @default(0)
  chaabi              Int?          @default(0)
  cih                 Int?          @default(0)
  cash                Int?          @default(0)
  cashPlus            Int?          @default(0)
  beyou               Int?          @default(0)    
  fornisseur          Int?          @default(0)
  credit_negatif      Int?          @default(0)
  credit_positif      Int?          @default(0)
  non_paye            Int?          @default(0)
  non_livre           Int?          @default(0)
  capital_reel        Int?          @default(0)
  capital_general     Int?          @default(0)
  userId              String
  user              User          @relation(fields: [userId], references: [clerkId] , onDelete: Cascade)
}

model User {
  id          String   @id @default(cuid())
  clerkId     String   @unique
  email       String   @unique
  firstName   String?
  lastName    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  factures    factures[]
}
